<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Community Archictecture Analysis: Team Proposal</title>
      <link href="/blog/hfoss/commarchteam/"/>
      <url>/blog/hfoss/commarchteam/</url>
      
        <content type="html"><![CDATA[<h1 id="Team-Proposal"><a href="#Team-Proposal" class="headerlink" title="Team Proposal"></a>Team Proposal</h1><p>This blog post serves as a proposal for the community architecture analysis of KDEvelop.</p><h2 id="Team-Members"><a href="#Team-Members" class="headerlink" title="Team Members"></a>Team Members</h2><ul><li>Nic Hartley</li><li><p><a href="mailto:nxh9052@rit.edu" target="_blank" rel="noopener">nxh9052@rit.edu</a></p></li><li><p>Joshua Schenk</p></li><li><p><a href="mailto:jks7743@rit.edu" target="_blank" rel="noopener">jks7743@rit.edu</a></p></li><li><p>Ian Effendi</p></li><li><a href="mailto:iae2784@rit.edu" target="_blank" rel="noopener">iae2784@rit.edu</a> </li></ul><h2 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h2><p>Our team is performing an analysis on the community architecture of the <a href="https://www.kdevelop.org/" target="_blank" rel="noopener">KDEvelop</a> IDE.</p><p>KDevelop is a cross-platform, multi-language IDE, with a wide variety of integrations. It supports plugins to add more functionality seamlessly.</p><h2 id="Division-of-Labor"><a href="#Division-of-Labor" class="headerlink" title="Division of Labor"></a>Division of Labor</h2><p>Each team member is responsible for a different ‘slice’ of the analysis.</p><h3 id="Nic-Hartley"><a href="#Nic-Hartley" class="headerlink" title="Nic Hartley"></a>Nic Hartley</h3><p>Nic is responsible for running Git By a Bus on the repository and answering questions related to the project’s survivability in the event the top 20% of active contributors were unable to continue development. </p><p>This includes the following questions:</p><ol><li><p>6E - Who has the highest amounts of “Unique Knowledge?” (As per your “Git-by-a-bus” report. If there is a tie, list each contributor, with links if possible).</p></li><li><p>6J - What have been some of the major bugs/problems/issues that have arisen during development? Who is responsible for quality control and bug repair?</p></li><li><p>6K - How is the project’s participation trending and why?</p></li><li><p>6L - In your opinion, does the project pass “The Raptor Test?” (i.e. Would the project survive if the BDFL, or most active contributor were eaten by a Velociraptor?) Why or why not?</p></li><li><p>6M - In your opinion, would the project survive if the core team, or most active 20% of contributors, were hit by a bus? Why or why not?</p></li></ol><h3 id="Joshua-Schenk"><a href="#Joshua-Schenk" class="headerlink" title="Joshua Schenk"></a>Joshua Schenk</h3><p>Joshua is responsible for calculating the Callaway Coefficient of Fail and answering questions regarding the structure and decision-making process of the community.</p><p>This includes the following questions:</p><ol><li><p>6F - What is your project’s “Calloway Coefficient of Fail?”</p></li><li><p>6G - Has there been any turnover in the Core Team? (i.e. has the same top 20% of contributors stayed the same over time? If not, how has it changed?)</p></li><li><p>6H - Does the project have a BDFL, or Lead Developer? (BDFL == Benevolent Dictator for Life) If not, what is the structure of its leadership, and how is it chosen?</p></li><li><p>6I - Are the front and back end developers the same people? What is the proportion of each?</p></li><li><p>6Q - Based on these answers, how would you describe the decision making structure/process of this group? Is it hierarchical, consensus building, ruled by a small group, barely contained chaos, or ruled by a single or pair of individuals?</p></li></ol><h3 id="Ian-Effendi"><a href="#Ian-Effendi" class="headerlink" title="Ian Effendi"></a>Ian Effendi</h3><p>Ian is responsible for the utilizing the alternative analysis tool (in this case, the ‘<a href="http://oss-watch.ac.uk/apps/openness/" target="_blank" rel="noopener">Openness Rating</a>’ tool provided by OSS Watch) and answering biographical questions regarding the project.</p><p>This includes answering the following questions:</p><ol><li><p>6A - Write a description of the project, its purpose and goals.</p></li><li><p>6B - Give a brief history of the project. When was the initial commit? The latest commit?</p></li><li><p>6C - Who approves patches? How many people?</p></li><li><p>6D - Who has commit access, or has had patches accepted? How many total?</p></li><li><p>6N - Does the project have an official “on-boarding” process in place? (new contributor guides, quickstarts, communication leads who focus specifically on newbies, etc…)</p></li><li><p>6O - Does the project have Documentation available? How extensive is it? Does it include code examples?</p></li><li><p>6P - If you were going to contribute to this project, but ran into trouble or hit blockers, who would you contact, and how?</p></li></ol><h2 id="Important-Links"><a href="#Important-Links" class="headerlink" title="Important Links"></a>Important Links</h2><p>The source code can be found at <a href="https://github.com/KDE/kdevelop" target="_blank" rel="noopener">KDEvelop’s GitHub Repository</a>.</p><h2 id="How-will-you-communicate-with-them-i-e-IRC-Channel-Email-Address-mail-lists-issue-trackers-etc…"><a href="#How-will-you-communicate-with-them-i-e-IRC-Channel-Email-Address-mail-lists-issue-trackers-etc…" class="headerlink" title="How will you communicate with them? (i.e. IRC Channel, Email Address, mail lists, issue trackers, etc…)"></a>How will you communicate with them? (i.e. IRC Channel, Email Address, mail lists, issue trackers, etc…)</h2><p>KDEvelop uses the #kdevelop channel on Freenode IRC.<br>The project mailing list can be found here: <a href="https://mail.kde.org/mailman/listinfo/kdevelop-devel" target="_blank" rel="noopener">https://mail.kde.org/mailman/listinfo/kdevelop-devel</a></p><h2 id="Upstream-Contributor-Mentors"><a href="#Upstream-Contributor-Mentors" class="headerlink" title="Upstream / Contributor Mentors"></a>Upstream / Contributor Mentors</h2><p>Several team members are listed on KDEvelop’s website <a href="https://www.kdevelop.org/kdevelop-team" target="_blank" rel="noopener">here</a>, including inactive developers. Below is the information for the core and active contributors.</p><h3 id="Core-Developers"><a href="#Core-Developers" class="headerlink" title="Core Developers"></a>Core Developers</h3><ul><li>Kevin Funk | <a href="mailto:kfunk@kde.org" target="_blank" rel="noopener">kfunk@kde.org</a></li><li><p>Co-maintainer; C++/Clang, General Improvements, QA, Windows Support, Performance, Website, and more…</p></li><li><p>Sven Brauch | <a href="mailto:svenbrauch@gmail.com" target="_blank" rel="noopener">svenbrauch@gmail.com</a></p></li><li><p>Co-Maintainer; Python Support, User Interface improvements</p></li><li><p>Milian Wolff | <a href="mailto:mail@milianw.de" target="_blank" rel="noopener">mail@milianw.de</a></p></li><li><p>Generic manager, Webdevelopment Plugins, Snippets, Bugfixing, Performance, and more…</p></li><li><p>Aleix Pol Gonzalez | <a href="aleixpol@gmail.com">aleixpol@gmail.com</a></p></li><li>CMake Support, Run Support, Kross Support, Git Support, and more…</li></ul><h3 id="Active-Contributors"><a href="#Active-Contributors" class="headerlink" title="Active Contributors"></a>Active Contributors</h3><ul><li>David Nolden | <a href="david.nolden.kdevelop@art-master.de">david.nolden.kdevelop@art-master.de</a></li><li><p>Definition-Use Chain, C++ Support, Code Navigation, Code Completion, Coding Assistance, Refactoring, and more…</p></li><li><p>Olivier JG | <a href="olivier.jg@gmail.com">olivier.jg@gmail.com</a></p></li><li>Various Bugfixes, Polishing, Bug Triaging, Rename Assistant, and more…</li></ul><h2 id="On-Challenges"><a href="#On-Challenges" class="headerlink" title="On Challenges"></a>On Challenges</h2><h3 id="What-are-the-easy-parts"><a href="#What-are-the-easy-parts" class="headerlink" title="What are the easy parts?"></a>What are the easy parts?</h3><ul><li><p>Finding the biographical information regarding the project is just a matter of searching for answers in the right places.</p></li><li><p>Since KDE supports the development of KDEvelop, it’s easier to find documentation for the community in one place.</p></li><li><p>Divvying up the work should be ‘easy’ because the rubric establishes all of the things that must be done; it’s just a matter of assigning tasks to each participant.</p></li></ul><h3 id="What-are-the-hard-parts"><a href="#What-are-the-hard-parts" class="headerlink" title="What are the hard parts?"></a>What are the hard parts?</h3><ul><li><p>Getting into contact with ‘upstream Mentors’. Time zones and online availability are factors that can impact the process.</p></li><li><p>Large projects will take a longer time to analyze. Knowing the exact process to contribute may take more time to </p></li><li><p>Keeping in communication with team members while working on the analysis itself can be difficult.</p></li></ul><h3 id="How-will-you-overcome-both"><a href="#How-will-you-overcome-both" class="headerlink" title="How will you overcome both?"></a>How will you overcome both?</h3><p>By Tuesday, we seek to complete the task distribution and team proposal documents. </p><p>By Wednesday, we seek to complete each of our analyses and discuss our conclusions for each of the answers.</p><p>By Thursday, we’ll take our individual write-up and put together a presentation to showcase in class on Friday.</p><p>On Friday, we’ll present our findings.</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
          <category> hfoss </category>
          
      </categories>
      
      
        <tags>
            
            <tag> open-source </tag>
            
            <tag> class </tag>
            
            <tag> documentation </tag>
            
            <tag> architecture </tag>
            
            <tag> analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HFOSS - Quiz 1</title>
      <link href="/blog/quiz-1/"/>
      <url>/blog/quiz-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Quiz-1"><a href="#Quiz-1" class="headerlink" title="Quiz 1"></a>Quiz 1</h1><h2 id="Short-Answer"><a href="#Short-Answer" class="headerlink" title="Short Answer"></a>Short Answer</h2><p><strong>1) Please expand each of the following acronyms (1 pt each):</strong></p><p>1.1) IRC - <code>Internet Relay Chat</code><br>1.2) FOSS - <code>Free and Open Source Software</code><br>1.3) OLPC - <code>One Laptop Per Child</code><br>1.4) PR - <code>Pull Request</code></p><p>(Please use the expansion most appropriate to the class.)</p><p><em>Bonus: Give the expansion for the acronym GNU. (1 pt)</em></p><p>GNU - <code>GNU Not Unix</code></p><p><strong>2) What is the name of the version control system we use in this course? (1 pt)</strong></p><p><code>Git.</code></p><p><em>Bonus: Give the name for another version control system. (1 pt)</em></p><p><code>Mercurial</code></p><p><strong>3) Please give the one-word name for the interface used in the OLPC computers &amp; our VMs? (1 pt)</strong></p><p><code>Sugar.</code></p><p><strong>4) <em>Bonus: What is the short, two-letter name for the OLPC computers for which this desktop software was first developed? (1 pt)</em></strong></p><p><code>XO.</code></p><p><strong>5) We refer to sites that host source code as “forges”. What is the name of the primary forge used in this course? (1 pt)</strong></p><p><code>GitLab.</code></p><p><strong>6) <em>Bonus: Name the other forge we have used? (1 pt)</em></strong></p><p><code>GitHub.</code></p><p><strong>7) <em>Bonus: Name another forge, one we have not used for this course. (1 pt)</em></strong></p><p><code>BitBucket.</code></p><h2 id="Multiple-choice"><a href="#Multiple-choice" class="headerlink" title="Multiple choice"></a>Multiple choice</h2><p><strong>8) The GitHub-specific term to describe the process in which, starting from one repository hosted at GitHub, one creates another repository, also hosted at GitHub, but under the control of a different user account. (1 pt)</strong></p><p><code>d) fork</code></p><p><strong>9) A collection of related commit objects (1 pt)</strong></p><p><code>a) repository</code></p><p><strong>10) A separate, but related, repository from which one may fetch or pull changes into one’s own working copy, and to which one possibly has permission to push changes. (1 pt)</strong></p><p><code>c) remote</code></p><p><strong>11) The general term in git for making an exact, working copy of another repository in which changes can be tracked separately between the two versions. (1 pt)</strong></p><p><code>d) fork</code></p><p><strong>12) A namespace in which one can track changes to a set of files within a given repository. This term applies both to the action and to the result of the action. Comparisons (‘diffs’ or patches) can be made between different such namespaces. (1 pt)</strong></p><p><code>b) branch</code></p><p><strong>13) <em>Consider the following (+1 for each correct, -1 for each incorrect):</em></strong></p><p>a) <code>e59b627</code><br>b) <code>451.867</code><br>c) <code>dca_079</code><br>d) <code>9539807</code><br>e) <code>DB6A60A</code><br>f) <code>614@1d4</code><br>g) <code>be34fb47c60d</code></p><p><em>Looking just at the string of non-space characters to the right of the close-parenthesis …</em></p><p><strong>List which of these could be a valid commit identifier?</strong></p><p><code>Choices (a), (e), and (g).</code></p><p><strong>14) We’ve discussed “the four R’s” as a shorthand for the freedoms attached to software for it to be considered “free” or “open source”.</strong></p><p><em>List or describe each. (eg, if you can remember the “r” word you can just give that. If you cannot remember the term, but can describe the freedom involved, that also counts).</em></p><p><em>Various “r” words are roughly synonymous for some of the freedoms, but we’re counting freedoms here, not synonyms so if you give two (or more) terms for the same freedom, it only counts once. For the purposes of this quiz, “remix” does not count as describing any of them. (2 pt each)</em></p><p>10.1) <code>Run</code></p><p>10.2) <code>Read</code></p><p>10.3) <code>Repair</code></p><p>10.4) <code>Redistribute</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> quiz, hfoss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Literature Review #2: Roads and Bridges</title>
      <link href="/blog/hfoss/lit-review-2/"/>
      <url>/blog/hfoss/lit-review-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Review-Roads-and-Bridges-The-Unseen-Labor-Behind-Our-Digital-Infrastructure"><a href="#Review-Roads-and-Bridges-The-Unseen-Labor-Behind-Our-Digital-Infrastructure" class="headerlink" title="Review: Roads and Bridges: The Unseen Labor Behind Our Digital Infrastructure"></a>Review: Roads and Bridges: The Unseen Labor Behind Our Digital Infrastructure</h1><p>This is the second of several literature reviews for content relevant to the humanitarian free and open source software course. In this entry, I will be reviewing <em><a href="https://github.com/ritjoe/hfoss/blob/master/assets/roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure.pdf" target="_blank" rel="noopener">Roads and Bridges: The Unseen Labor Behind Our Digital Infrastructure</a></em> by <a href="https://nadiaeghbal.com/" target="_blank" rel="noopener">Nadia Eghbal</a>.</p><a id="more"></a><hr><h2 id="The-Basics"><a href="#The-Basics" class="headerlink" title="The Basics"></a>The Basics</h2><p>Nadia Eghbal is a Protocol Labs researcher based in San Francisco and is the author of <em>Roads and Bridges</em>. Eghbal explores the production and economic models behind open-source software, and had <a href="https://www.linkedin.com/in/nadiaeghbal/" target="_blank" rel="noopener">previously worked at GitHub</a>, building programs, products, and partnerships to better support open-source developers.</p><p>In July of 2016, Eghbal published <em>Roads and Bridges</em>, a deeper look at the maintainance required of our digital infrastructure. Likening this massive support system (with an unprecedented demand) to physical infrastructure (<em>a la</em> roads and bridges), Eghbal draws out support for the great work that open source developers do - and highlight the challenges that come with sustaining that infrastructure.</p><p>In addition to writing longform research on open-source software, Eghbal has written extensively on the subject in <a href="https://medium.com/@nayafia" target="_blank" rel="noopener">shortform</a> and has been a part of <a href="https://changelog.com/rfc" target="_blank" rel="noopener">podcasts that highlight</a> the <a href="https://hopeinsource.com/" target="_blank" rel="noopener">culture of open source</a>.</p><p>You can find more of her research on her personal website, <a href="https://nadiaeghbal.com/research/" target="_blank" rel="noopener">here</a>.</p><h2 id="The-Gist"><a href="#The-Gist" class="headerlink" title="The Gist"></a>The Gist</h2><p>Eghbal’s work is a detailed retelling of the open-source history, reaching as far back as 1998, when OpenSSL was first created between a group of security experts in the UK. OpenSSL - a cybersecurity project that is known for enabling websites with the ability to transmit sensitive data over the internet - was recently susceptible to Heartbleed, a dire security flaw overlooked by its handful of maintainers. </p><p>But, OpenSSL is used by millions around the world - the internet wouldn’t exist as it does today without it. OpenSSL’s problems are indicative of a recurring issue in the open-source community’s narrative: the use of free software without the support to maintain it.</p><hr><h2 id="The-Good"><a href="#The-Good" class="headerlink" title="The Good"></a>The Good</h2><ul><li>1) There is a great encouragement in the writing to reuse and borrow from what others have created before.</li><li>2)  Free software makes building empowering software accessible and possible to those with limited funds.</li><li>3) The sheer size and wealth of material that Eghbal presents is crucial and necessary to understanding the full context of open source history: the fact that such material has been released for free access to all is just as telling of where Eghbal stands on the conversation.</li></ul><hr><h2 id="The-Bad"><a href="#The-Bad" class="headerlink" title="The Bad"></a>The Bad</h2><ul><li>1) New developers who consistently build projects using tools from others before them may never gain a deeper understanding of the work they create.</li><li>2) Developers without a deep understanding of the work that they create rely on possibly insecure services and infrastructure that could collapse - the more who use a particular project as a dependency without understanding it, the greater the risk becomes of system-wide failure. (See: <a href="https://github.com/npm/npm/issues/19883" target="_blank" rel="noopener">NPM/Node pre-release mayhem</a>).</li><li>3) The greater the gap in skill, the harder it will be for younger developers to fill the holes left by older developers. People can’t work on software forever and it needs to be maintained; but software today is, “deteriorating,” due to the lack of funding and contributions (pp. 76).</li></ul><hr><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><ul><li>1) What organizations are actively contributing to the problems at hand?</li><li>2) What can be done to keep companies investing in open source over the years?</li><li>3) Are our communities of software too big to fail? NodeJS? Others like that? What can we do to combat degrading and insecure code?</li></ul>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
          <category> hfoss </category>
          
      </categories>
      
      
        <tags>
            
            <tag> open-source </tag>
            
            <tag> class </tag>
            
            <tag> documentation </tag>
            
            <tag> reading </tag>
            
            <tag> bugs </tag>
            
            <tag> issues </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Meetup: BrickHack V</title>
      <link href="/blog/hfoss/brickhack-v/"/>
      <url>/blog/hfoss/brickhack-v/</url>
      
        <content type="html"><![CDATA[<h1 id="BrickHack-V"><a href="#BrickHack-V" class="headerlink" title="BrickHack V"></a><a href="https://brickhackv.devpost.com/" target="_blank" rel="noopener">BrickHack V</a></h1><p><strong>BRICK CITY’S PREMIERE HACKATHON</strong></p><blockquote><p><a href="https://brickhack.io/" target="_blank" rel="noopener">BrickHack</a> brings <strong>designers, developers, and all sorts of makers</strong> together for 24 hours to create something from nothing. Mentors and industry representatives will lend expertise and watch as you dive into <strong>learning, developing, and producing a unique project</strong>. Expect lots of free food, swag, coffee, and all-you-can-print 3D printers! From the novices to the experts, from designers to enginers, <strong>this one’s for you!</strong></p></blockquote><p>See this video below for a recap of BrickHack 2018.</p><div class="video-container"><iframe src="//www.youtube.com/embed/0fOUf1JwzBs" frameborder="0" allowfullscreen></iframe></div><h2 id="The-Event"><a href="#The-Event" class="headerlink" title="The Event"></a>The Event</h2><p>BrickHack V took place between February 16th and February 17th of 2019. Hacking ran from 12:30 PM - 12:30 PM, and I was there for every second!</p><p>BrickHack is an annual invention marathon open to any student (that registered in advance). This year, BrickHack’s fifth event took place in the Clark Gym located on the Rochester Institute of Technology’s campus. There were over <strong>600 participants</strong> at this year’s hackathon - all of them broke into groups (or worked alone) and had 24 hours to invent, create, learn, build, and innovate!</p><p>Students from Cornell, Binghamton, NYU, Waterloo, University of Toronto, Northeastern, UMass, RPI, and Univesity of Buffalo (as well as some CUNY students), were in attendance!</p><h3 id="Venue-amp-Vendors"><a href="#Venue-amp-Vendors" class="headerlink" title="Venue &amp; Vendors"></a>Venue &amp; Vendors</h3><p>BrickHack is sponsored by many companies, but, a significant amount of support is given to <a href="https://coderit.org/" target="_blank" rel="noopener">CodeRIT</a> by the <a href="https://mlh.io" target="_blank" rel="noopener">Major League Hacking</a> (MLH) organization. MLH is the official student hackathon league; they support over <a href="http://mlh.io/events" target="_blank" rel="noopener">200 weekend-long invention competitions</a> every year and have cultivated the skills of more than <strong>65,000</strong> students around the world.</p><p>Missed the event? There were several sponsors present (such as <a href="https://www.wegmans.com/" target="_blank" rel="noopener">Wegmans</a>, <a href="https://www.datto.com/" target="_blank" rel="noopener">Datto</a>, <a href="https://www.google.com/" target="_blank" rel="noopener">Google</a>, and much, much more). Some vendors, like <a href="https://www.verizonwireless.com/" target="_blank" rel="noopener">Verizon</a>, were touting the <em>edge-of-their-seats-blazing-fast</em> <strong>5G</strong> technology. Others were more than excited to get students to create more things with their products, like <a href="https://unity3d.com/" target="_blank" rel="noopener">Unity3D</a>. </p><p>Many of these groups sponsored food, dinner, and talks meant to encourage students to take their development and hacking careers in new directions.</p><p>Unity held a workshop regarding careers and their famous game engine. A representative from <a href="https://www.acvauctions.com/" target="_blank" rel="noopener">ACV Auctions</a> - a company specializing in automotive consumer resale - spoke about working at their company. Wegmans spoke about the importance of data, and encouraged groups to reuse and remix their public data to reshape a narrative in interesting ways.</p><h3 id="Highlights"><a href="#Highlights" class="headerlink" title="Highlights"></a>Highlights</h3><p>Participating groups had the chance to submit their projects for the chance to win certain prizes, based on criteria posted near the start of the event. Over <strong>$19,304</strong> were offered in prizes!</p><p>Some of the more notable prizes were:</p><ul><li>Datto’s Most socially impactful project.</li><li>RIT’s Simone Center’s Most Commercially Viable Product.</li><li>BrickHack’s ‘Hack Our Health’ award for the product and/or application with the most promise in benefiting the mental health needs of college students.</li><li>Verizon’s Best use of 5G currencies in immersive media.</li><li>and, Unity’s Best Game, among many others…</li></ul><h2 id="Mood-Swing"><a href="#Mood-Swing" class="headerlink" title="Mood Swing"></a>Mood Swing</h2><p><img src="/images/posts/brickhack-v/logo.png" alt="Logo for Mood Swing"></p><blockquote><p>“Track your mood across several days and see an overview of how you’ve felt.”</p></blockquote><p>We created a mood tracker application that allows users to take control of their own data. Users can self-host a MongoDB instance and interface with it using our code to keep track of their mood (a range from happy to sad), hours of exercise, hours of sleep and cups of coffee in the last day.</p><p>This application was built with: <code>javascript</code>, <code>react</code>, <code>bash</code>, <code>git</code>, <code>mongodb</code>, <code>mongoose</code>, <code>node.js</code>, <code>lucidchart</code>, <code>google-chart</code>, <code>vscode</code>, <code>vim</code>, <code>nano</code>, <code>visual-studio</code>, <code>webstorm</code>, <code>trello</code>, <code>google-drive</code>, <code>discord</code>.</p><h3 id="A-Look-at-the-Team"><a href="#A-Look-at-the-Team" class="headerlink" title="A Look at the Team"></a>A Look at the Team</h3><p>Taking the initials from our team, we came up with the name ‘Chef Bicc’. Take a look at who made this product:</p><p>Carson Bloomingdale<br>{ <a href="https://devpost.com/carsonbloomingdale" target="_blank" rel="noopener">DevPost</a><br><a href="https://carsonbloomingdale.com/" target="_blank" rel="noopener">Portfolio</a> }</p><blockquote><p>Carson worked on the front-end, implementing ReactJS in order to showcase the Mood visualization.</p></blockquote><p>Claire Chen<br>{ <a href="https://devpost.com/ClaireChen" target="_blank" rel="noopener">DevPost</a><br>[Portfolio] }(<a href="https://www.linkedin.com/in/claire-chen-a4a288172" target="_blank" rel="noopener">https://www.linkedin.com/in/claire-chen-a4a288172</a>)</p><blockquote><p>Claire helped develop behaviors on the React-powered client.</p></blockquote><p>Ian Effendi<br>{ <a href="https://devpost.com/rimij405" target="_blank" rel="noopener">DevPost</a><br><a href="https://rimij405.github.io/">Portfolio</a> }</p><blockquote><p>I worked on the REST API (powered by an Express.JS server) that powers the application’s tracking abilities. I created controllers, models, and routes, using a mongoose module to handle connecting to MongoDB.</p></blockquote><p>Henry Farr<br>{ <a href="https://devpost.com/hfarr" target="_blank" rel="noopener">DevPost</a><br><a href="https://www.linkedin.com/in/henry-farr-a191b6172" target="_blank" rel="noopener">Portfolio</a> }</p><blockquote><p>Henry hosted the production webserver on his personal system; this project was his first time using NodeJS (and JavaScript in general).</p></blockquote><h3 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h3><p>We knew that we wanted to create an open-source application that could track personal data and empower those who stick with the program.</p><p>Our original idea was to allow users the chance to select a daily mood from a series of emoji, and, allow them to show an average ‘mood’ based on a date range that they chose. In addition to mood, users would be able to keep track of other daily life events (such as drinks of water, hours of sleep, hours of exercise, and meals in one day). From there, users are able to take the data they own and visualize the results across a day, a week, a month, and even a year.</p><h3 id="The-Frontend-s"><a href="#The-Frontend-s" class="headerlink" title="The Frontend(s?)"></a>The Frontend(s?)</h3><p>We created an intentionally detached API for the backend to allow a community of mindful users the opportunity to create a cross-platform ecosystem.</p><p>Our interpretation resulted in a React-powered web client, but, there was discussion of creating a native Flutter/Dart mobile application.</p><h3 id="The-Backend"><a href="#The-Backend" class="headerlink" title="The Backend"></a>The Backend</h3><p>The exposed API is powered by <a href="">MongoDB</a> and <a href="">NodeJS</a>. We want to make sure that our backend remains scalable and accessible from multiple endpoints: each mood entry is stored in a Binary JSON (BSON) format, taking up little space while remaining quick to query. </p><p>The data itself is flexible and the JSON document format offers many avenues to converting for use in other ecosystems. The goal of keeping the backend detached is to keep development agile and flexible. </p><p>NodeJS’s non-blocking I/O was perfect for our needs. We had to choose between a <a href="https://www.soapui.org/learn/api/soap-vs-rest-api.html" target="_blank" rel="noopener">SOAP-style</a>,  a <a href="https://medium.freecodecamp.org/building-a-simple-node-js-api-in-under-30-minutes-a07ea9e390d2" target="_blank" rel="noopener">REST-style</a>, and a <a href="https://scotch.io/@alloys/how-to-build-an-rpc-based-api-with-nodejs" target="_blank" rel="noopener">RPC-style</a> API. </p><p>SOAP wraps payload information in an XML format, making it language-agnostic. REST models domain resources and entities, making CRUD operations available for all the data. RPC is great for interacting with the backend through commands/procedures.</p><p>At the end of the day, we chose to go forth with an RPC API. But nothing’s stopping us from adding to our system. The API endpoint contains, importantly, an ‘API Version’ field that can be queried to choose how we (and others) want to handle their data in the future.</p><h3 id="Data-Ownership"><a href="#Data-Ownership" class="headerlink" title="Data Ownership"></a>Data Ownership</h3><p><img src="/images/posts/brickhack-v/screenshot.jpg" alt="Screenshot from the application."></p><p>We’ve released the code under the permissive open-source <a href="https://opensource.org/licenses/MIT" target="_blank" rel="noopener">MIT License</a> to encourage other people to take control of their data, and keep track of their mental health without having to pay for an application.</p><p>Use the <code>frontend</code> branch to get access to a react-based web-client. Use the <code>backend</code> branch to get access to the MongoDB-powered data store.</p><p>Or, write your own frontend to interface with the API!</p><p>You just need a place to host the database!</p><h2 id="Post-Mortem"><a href="#Post-Mortem" class="headerlink" title="Post-Mortem"></a>Post-Mortem</h2><h3 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h3><p>We split up into two groups to tackle two sides of this application. We wanted to make sure our client was detached from the backend; getting from a prototype to a place where we could cleanly test functionality in the client took work. The biggest challenge came down to communicating endpoint expectations and clarifying how our JSON payloads (for both requests and responses) would interact.</p><h3 id="Next-Steps"><a href="#Next-Steps" class="headerlink" title="Next Steps"></a>Next Steps</h3><p>Encouraging developers to build upon the framework we’ve laid out is a great start! That said, we have more features in mind. We entertained creating a cross-platform suite of clients and thought about using Google’s Dart/Flutter combo to create a robust native mobile client.</p><h2 id="See-More"><a href="#See-More" class="headerlink" title="See More"></a>See More</h2><p><a href="https://devpost.com/software/brickhack-v-chefbicc" target="_blank" rel="noopener">DevPost Submission</a></p><p><a href="https://github.com/rimij405/brickhack-v-chefbicc" target="_blank" rel="noopener">GitHub Repository</a></p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
          <category> hfoss </category>
          
      </categories>
      
      
        <tags>
            
            <tag> open-source </tag>
            
            <tag> hackathon </tag>
            
            <tag> meetup </tag>
            
            <tag> nodeJS </tag>
            
            <tag> react </tag>
            
            <tag> mental health </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Waiting for Godot</title>
      <link href="/blog/hfoss/waiting-for-godot/"/>
      <url>/blog/hfoss/waiting-for-godot/</url>
      
        <content type="html"><![CDATA[<h1 id="Waiting-for-Godot"><a href="#Waiting-for-Godot" class="headerlink" title="Waiting for Godot"></a>Waiting for Godot</h1><p><img src="/images/posts/waiting-for-godot/godot/logo_512px.png" alt="Godot Logo."></p><p>This week I’m working with <a href="https://godotengine.org/" target="_blank" rel="noopener">Godot</a>, a free and open source cross-platform game engine released under the very permissive <a href="https://opensource.org/licenses/MIT" target="_blank" rel="noopener">MIT license</a>. Let’s get to it.</p><a id="more"></a><h2 id="The-Game-Engine-I-Waited-For"><a href="#The-Game-Engine-I-Waited-For" class="headerlink" title="The Game Engine I Waited For"></a>The Game Engine I Waited For</h2><p>The Godot homepage has this neat little tagline:</p><blockquote><p><strong>The Game Engine You Waited For</strong></p></blockquote><p>The joke? <a href="https://en.wikipedia.org/wiki/Waiting_for_Godot" target="_blank" rel="noopener"><em>Waiting for Godot</em></a> is a play by <a href="https://en.wikipedia.org/wiki/Samuel_Beckett" target="_blank" rel="noopener">Samuel Beckett</a>, in which the main characters wait for the arrival of someone named Godot … who never arrives. Although it was originally written in French, Beckett’s English language version of the material was voted, “the most significant English language play of the 20th century,” in a 1990 poll conducted by the British Royal National Theatre.</p><p>Godot was formed in 2007 by Juan ‘reduz’ Linietsky and Ariel ‘punto’ Manzur. According to Linietsky, the name <em>Godot</em> was chosen to represent their never-ending wish of adding new features to the engine, always pushing off an exhaustive product. It wasn’t until February of 2014 - seven years later - that the source code would be published on GitHub and it wasn’t until the end of that year for Godot to reach version 1.0 - it’s first stable release.</p><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><p>At the time of writing this, Godot’s last stable release (v.3.0.6) was released in July of 2018 - and development is on-going. The engine itself runs on several operating systems, including <a href="https://en.wikipedia.org/wiki/Microsoft_Windows" target="_blank" rel="noopener">Windows</a>, <a href="https://en.wikipedia.org/wiki/MacOS" target="_blank" rel="noopener">macOS</a>, <a href="https://en.wikipedia.org/wiki/Linux" target="_blank" rel="noopener">Linux</a>, <a href="https://en.wikipedia.org/wiki/Berkeley_Software_Distribution" target="_blank" rel="noopener">BSD</a>, and <a href="https://en.wikipedia.org/wiki/Haiku_(operating_system" target="_blank" rel="noopener">Haiku</a>). (<em>Fun fact about Haiku - it’s an open source operating system supported by Haiku, Inc., a non-profit organization based in Rochester, New York, founded by <a href="https://www.haiku-os.org/blog/koki/2009-11-28_history_channel_2003_interview_michael_phipps/" target="_blank" rel="noopener">Michael Phipps</a>, Computer Science graduate of Rochester Institute of Technology, Class of ‘97</em>). Games made with Godot can target desktop, mobile, and web platforms, using Godot’s export template system. It’s easy to create custom builds as well, if the existing templates don’t cut it.</p><h3 id="Compact"><a href="#Compact" class="headerlink" title="Compact"></a>Compact</h3><p>Godot is a small engine - roughly 20 MB in size - and is very easy to compile. It comes with a built-in debugger, profiler (with graph plotting and time seeking), that allows for projects to be modified, even while they’re running. Changes made while live are persistent - a design choice that some engines don’t have.</p><h3 id="It’s-in-the-Node"><a href="#It’s-in-the-Node" class="headerlink" title="It’s in the Node"></a>It’s in the Node</h3><p>Godot adpots a Scene- and Node-based hiearchy as its approach to game development. Everything in Godot is a Node and nodes can be (infinitely) nested. The visual editor that comes with Godot makes it friendly, inviting, and easy-to-use for creators at any level of the game development pipeline.</p><p>Godot’s configuration and project files are version control friendly - feel free to make liberal use of your diff command. Godot also utilizes a custom scripting language (GDScript) that was written explicitly for the engine - GDScript’s syntax is also supported by GitHub, so it enjoys some of the same privileges of its older cousins.</p><h3 id="Scripting"><a href="#Scripting" class="headerlink" title="Scripting"></a>Scripting</h3><p>While GDScript is a Python-like language meant explicitly for Godot, it’s not the only one available. The latest stable release has full C# 7.0 support (using Mono), support for a visual scripting system using blocks and connectors, and full native C++ support without the need to recompile the engine (through the use of a core-module dynamic). The GDNative aspect of the project exposes the engine’s native C symbol API that allows developers to create and utilize bindings to other languages if they so wish - bindings already exist for Python, Nim, and D, among other languages.</p><h3 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h3><p>Everything in Godot was built with animation in mind: from bones and objects to function calls themselves, everything can be tweened. </p><h2 id="Godot-vs-Unity"><a href="#Godot-vs-Unity" class="headerlink" title="Godot vs. Unity"></a>Godot vs. Unity</h2><p><img src="/images/posts/waiting-for-godot/editor.png" alt="Picture of editor."></p><p>Godot supports both 2D and 3D game development. While this is what draws the largest comparison to the <a href="https://unity3d.com" target="_blank" rel="noopener">Unity3D</a> game engine, there are three crucial differences. By all means, Godot is not a perfect engine, but, knowing where it excels can help you make a decision about which engine to choose.</p><h3 id="No-Nest-To-Call-Home"><a href="#No-Nest-To-Call-Home" class="headerlink" title="No Nest To Call Home"></a>No Nest To Call Home</h3><p>Unity doesn’t allow you to use nested prefabs; all prefab instances will overwrite internal prefabs once ‘nested’. While Unity encourages composability over inheritance, it seems like a missed area to not allow prefabs to be components and children of other prefabs. Godot’s node-based system gets around this issue.</p><h3 id="Pixel-Perfect-2D"><a href="#Pixel-Perfect-2D" class="headerlink" title="Pixel Perfect 2D"></a>Pixel Perfect 2D</h3><p>Unity3D developers can create 2D games, but, it often comes with the overhead of running a 3D game engine on top of that. Godot’s 2D engine is fully dedicated 2D and is not just a repurposed 3D approximation of 2D. This advantage allows developers to create pixel-perfect gameplay, utilize 2D lights and normal maps, and animate 2D rigs with skeletons and IK. Unity can get the job done, but, your mileage may vary.</p><h3 id="Unity-is-Proprietary"><a href="#Unity-is-Proprietary" class="headerlink" title="Unity is Proprietary"></a>Unity is Proprietary</h3><p>Unity3D is free as in free pizza. It’s not an open source game engine, unlike Godot, so when you want to expand a particular feature set, you’re stuck waiting for the Unity team to get around to fixing it.</p><h2 id="Godot-vs-Cocos2d-x"><a href="#Godot-vs-Cocos2d-x" class="headerlink" title="Godot vs. Cocos2d-x"></a>Godot vs. Cocos2d-x</h2><p><img src="/images/posts/waiting-for-godot/cocos-creator.png" alt="CocosCreator Logo."></p><p>If you’re looking for an alternative to Godot, <a href="https://cocos2d-x.org/" target="_blank" rel="noopener">Cocos2d-x based editor CocosCreator</a> is a great open source engine with its own community supporting it.</p><h2 id="Ease-of-Use"><a href="#Ease-of-Use" class="headerlink" title="Ease of Use"></a>Ease of Use</h2><p><img src="/images/posts/waiting-for-godot/chrome-trip.gif" alt="Chrome Trip by @enthus1ast"></p><p><em><a href="https://code0.itch.io/chrome-trip" target="_blank" rel="noopener">Chrome Trip by @enthus1ast</a>. A downloadable, open source multiplayer game created with Godot for the GitHubGameOff 2017 jam.</em></p><p>Godot is special because of its ease of use. Ariel Manzur, co-founder of OKAM Studios and Godot, led a team of industry newcomers in the design of adventure game <em>Dog Mendonça &amp; Pizzaboy</em>. Godot, in some ways, was built by its founders to help express the desire for a more visual approach to game development, without necessarily sacrificing the power that comes with engines like <a href="https://unity3d.com" target="_blank" rel="noopener">Unity3D</a> and <a href="https://www.unrealengine.com/en-US/what-is-unreal-engine-4" target="_blank" rel="noopener">Unreal</a>.</p><p>Teachers at a West Virginia high school have used Godot as a way to address the state’s 2016 <a href="http://careertech.k12.wv.us/OCTIWebsiteRevisions/16Clusters/InformationTechnologyMainPage.html" target="_blank" rel="noopener">coding, app, and game design curriculum</a>.  There’s plenty of room for students to learn game development while introducing them to the concept of free (as in free speech) software.</p><h2 id="Open-Source-amp-Diverse-Community"><a href="#Open-Source-amp-Diverse-Community" class="headerlink" title="Open Source &amp; Diverse Community"></a>Open Source &amp; Diverse Community</h2><p>There is no question behind Godot’s status as free, open source software. On November 4th, 2015, Godot joined the <a href="https://sfconservancy.org/" target="_blank" rel="noopener">Software Freedom Conservacy</a>. On June 22nd, 2016, Godot received a $20,000 Mozilla Open Source Support (MOSS) “Mission Partners” award to incorporate Web Sockets, WebAssembly, and WebGL support. It has the acknowledgement of the big names in open source, and, the community is very active. There are currently 4,045 open and 11,267 closed issues on the <a href="https://github.com/godotengine/godot/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc" target="_blank" rel="noopener">upstream repository</a>. The project has been <a href="https://github.com/godotengine/godot/network/members" target="_blank" rel="noopener">forked more than 3,800 times</a> and there are currently <a href="https://github.com/godotengine/godot/pulls?q=is%3Apr+is%3Aopen+sort%3Aupdated-desc" target="_blank" rel="noopener">263 open pull requests</a>. </p><p>It is a thriving, vibrant community. This year, the first ever <em>Godot Sprint</em> was held in Brussels, two days before <a href="https://fosdem.org/2019/" target="_blank" rel="noopener">FOSDEM 2019</a> and <a href="https://godotengine.org/events/#godotcon" target="_blank" rel="noopener">GodotCon 2019</a>. Contributors were able to meet in order to encourage completion of C++ engine features, writing of documentation, and creation of teaching materials for new developers. These are signs of a strong open source project that will be a mainstay for years.</p><p>There are several ways to get involved with the community:</p><ul><li>IRC <a href="https://webchat.freenode.net/?channels=#godotengine" target="_blank" rel="noopener">freenode.net#godotengine</a>.</li><li><a href="https://discord.gg/zH7NUgz" target="_blank" rel="noopener">Discord</a>.</li><li><a href="https://matrix.to/#/#godotengine:matrix.org" target="_blank" rel="noopener">Matrix</a>.</li><li><a href="https://www.facebook.com/groups/godotengine/" target="_blank" rel="noopener">Facebook</a></li><li><a href="https://www.reddit.com/r/godot" target="_blank" rel="noopener">Reddit</a></li><li><a href="https://twitter.com/godotengine" target="_blank" rel="noopener">Twitter</a></li><li><a href="https://steamcommunity.com/app/404790" target="_blank" rel="noopener">Steam</a></li><li><a href="https://www.youtube.com/c/GodotEngineOfficial" target="_blank" rel="noopener">YouTube</a></li><li><a href="http://godotdevelopers.org/" target="_blank" rel="noopener">Godot Forum</a></li></ul><h2 id="Support-Development"><a href="#Support-Development" class="headerlink" title="Support Development"></a>Support Development</h2><p>If you aren’t interested in contributing to the Godot project as a developer, consider donating monthly via <a href="https://www.patreon.com/godotengine" target="_blank" rel="noopener">Patreon</a> or directly via <a href="https://godotengine.org/donate" target="_blank" rel="noopener">Paypal</a>. Godot’s donations are processed by the Software Freedom Conservancy and used to hire developers based on contracts that are made transparent to all supporters.</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
          <category> hfoss </category>
          
      </categories>
      
      
        <tags>
            
            <tag> open-source </tag>
            
            <tag> class </tag>
            
            <tag> game development </tag>
            
            <tag> documentation </tag>
            
            <tag> game engine </tag>
            
            <tag> Godot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Literature Review #1: Bug Reporting</title>
      <link href="/blog/hfoss/lit-review-1/"/>
      <url>/blog/hfoss/lit-review-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Review-How-to-Report-Bugs-Effectively"><a href="#Review-How-to-Report-Bugs-Effectively" class="headerlink" title="Review: How to Report Bugs Effectively"></a>Review: How to Report Bugs Effectively</h1><p>This is the first of several literature reviews for content relevant to the humanitarian free and open source software course. In this entry, I will be reviewing <em><a href="https://www.chiark.greenend.org.uk/~sgtatham/bugs.html" target="_blank" rel="noopener">How to Report Bugs Effectively</a></em> by <a href="https://www.chiark.greenend.org.uk/~sgtatham/" target="_blank" rel="noopener">Simon Tatham</a>.</p><a id="more"></a><hr><p><img src="/images/posts/lit-review-1/coding.jpg" alt="Image of laptop with code."></p><h2 id="The-Basics"><a href="#The-Basics" class="headerlink" title="The Basics"></a>The Basics</h2><p>At the start of the essay, the author, Simon Tatham, modestly titles himself a professional and free-software programmer. Tatham, however, is famous for creating and maintaining <a href="https://en.wikipedia.org/wiki/PuTTY" target="_blank" rel="noopener">PuTTY</a>, an open-source implementation of Telnet and Secure Shell (SSH) clients for Unix and Windows platforms. It’s fair to say that Tatham has experience with reporting and solving bugs in open-source software.</p><p>From the jump, Tatham plainly states the purpose of this guide: reading it will help developers write, “clear, helpful, <em>informative</em> bug reports.” By appraoching the written work with prepared examples and instances of unhelpful reporting practices, Tatham is able to help readers troubleshoot their own bug reporting practices. Notice you’re following a bad practice - this enables you to safely learn from that mistake and adjust course.</p><p>You can find this essay on Simon Tatham’s personal website, <a href="https://www.chiark.greenend.org.uk/~sgtatham/bugs.html" target="_blank" rel="noopener">here</a>.</p><h2 id="The-Gist"><a href="#The-Gist" class="headerlink" title="The Gist"></a>The Gist</h2><p>This guide helps users report bugs to programmers. It’s written in such a way that it prescribes approaches that the user can undertake when reporting a bug. It is precise, in explaining just how important detail is to the programmer, for users reporting bugs.</p><hr><p><img src="/images/posts/lit-review-1/good-idea.jpg" alt="Photo of a lightbulb doodle, pinned to corkboard."></p><h2 id="The-Good"><a href="#The-Good" class="headerlink" title="The Good"></a>The Good</h2><ul><li>1) Clear, practical examples that a user can review (if given the time) for writing their own bug reports. (The poor formatting, however, is Bad item #1).</li><li>2) The summary at the end of the entry is something that I wish more articles and blog posts had, especially when it comes to development and software tutorials.</li><li>3) It comes in several different languages!</li></ul><hr><p><img src="/images/posts/lit-review-1/thinking.jpg" alt="Image of someone staring at a laptop with concern."></p><h2 id="The-Bad"><a href="#The-Bad" class="headerlink" title="The Bad"></a>The Bad</h2><ul><li>1) The lack of spacing and formatting on the webpage makes it very diffiuclt to read. I want to be able to come back to this page while writing a bug report, scan for advice on the section I’m writing, and complete my report as quickly as possible.</li><li>2) This is written from the perspective of the user and the user alone. While useful for other developers for providing informative bug reports, the generalized presentation doesn’t help programmers know what questions to ask. That process is something you’ll learn largely from practice, experience, and a strong understanding of the codebase. This isn’t necessarily a bad thing, but, this can be a barrier for new contributers.</li><li>3) It doesn’t mention what users should do in the event repositories are archived. I think it would have been a good note to address what options they have - even one as simple as, “Find a new project that fulfills your needs if you don’t have the time/resources/skills to continue working on this one.”</li></ul><hr><p><img src="/images/posts/lit-review-1/questionmark.jpg" alt="High exposure photograph of a question mark drawn with neon light."></p><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><ul><li>1) Is this work up-to-date? Are there new best practices for reporting bugs?</li><li>2) What cases are there where a user shouldn’t freeze and should try to act quickly to document the issue?</li><li>3) What about situations where an open-source project is led by programmers who aren’t receptive to beginners filing incomplete bug reports and are rude about it? Should there be dedicated bug handlers? Does it factor into the decision to make a hostile fork?</li></ul><hr><h2 id="Follow-Up"><a href="#Follow-Up" class="headerlink" title="Follow-Up"></a>Follow-Up</h2><p>If I’m being honest, as I am reading this for class, a lot of this was already clear to me due to best practices in communicating issues that need debuging among team members in my past programming projects. That being said, I would agree that this is an essential read for those looking to get involved with bug reporting and helping with documentation.</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
          <category> hfoss </category>
          
      </categories>
      
      
        <tags>
            
            <tag> open-source </tag>
            
            <tag> class </tag>
            
            <tag> documentation </tag>
            
            <tag> reading </tag>
            
            <tag> bugs </tag>
            
            <tag> issues </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Meetup: Global Game Jam 2019</title>
      <link href="/blog/hfoss/global-game-jam-2019/"/>
      <url>/blog/hfoss/global-game-jam-2019/</url>
      
        <content type="html"><![CDATA[<h1 id="Global-Game-Jam-2019"><a href="#Global-Game-Jam-2019" class="headerlink" title="Global Game Jam 2019"></a><a href="https://globalgamejam.org/news/time-go-home-ggj19-roundup" target="_blank" rel="noopener">Global Game Jam 2019</a></h1><h2 id="The-Event"><a href="#The-Event" class="headerlink" title="The Event"></a>The Event</h2><p>After 11 years, the <a href="https://globalgamejam.org" target="_blank" rel="noopener">Global Game Jam</a> is still going strong. This year, 47,000 jammers made 9,000 games at 860 sites across 113 countries. This year, 10 new countries had jammers take part for the first time ever: Azerbaijan, Iraq, Sri Lanka, Kazakhstan, Kosovo, Kenya, the Ivory Coast, Myanmar, Namibia, and Rwanda!</p><p>This year, Global Game Jam 2019 took place from January 25th to January 27th; I was there for a majority of the time! Typically, the game jam time is based on your timezone: the theme is typically held under a public embargo until Hawaii (the last country by timezone) hits 5PM.</p><h3 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h3><p>This year’s game jam theme was <code>[What Home Means To You](https://globalgamejam.org/news/theme-global-game-jam-2019-%E2%80%A6)</code>. As is customary, it was revealed at the end of the <a href="https://youtu.be/pUohwjq9RkA?t=836" target="_blank" rel="noopener">keynote video</a> sharing interviews with people from all over the world, speaking in their native language about what home means to them.</p><h3 id="Venue"><a href="#Venue" class="headerlink" title="Venue"></a>Venue</h3><p>Global Game Jam was hosted around the world;That’s what the “global” was for! This year, the jammer location for RIT students was the main lab for IGM students. One welcome change was the ability to use the brand-new MAGIC center labs!</p><h3 id="Sponsors-amp-Diversifiers"><a href="#Sponsors-amp-Diversifiers" class="headerlink" title="Sponsors &amp; Diversifiers"></a>Sponsors &amp; Diversifiers</h3><p><img src="/images/posts/ggj-2019/ggj.jpg" alt="Global Game Jam 2019 Logo"></p><p>There were tons of sponsors who <a href="https://globalgamejam.org/jammer-resources" target="_blank" rel="noopener">showcased and paid for resources</a> as part of this event! While <a href="">Unreal Engine</a> and <a href="">Unity3D</a> were expected returning sponsors, there were others that always stand to support important causes that the game development community were keen to help represent.</p><p><a href="http://ithrivegames.org/" target="_blank" rel="noopener">iThrive Games</a> sponsored the <code>Forgive and Fortify</code> diversifier, encouraging developers to explore forgiveness. <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> encouraged developers to <code>Use the Source</code>: participants were encouraged to <strong>use one or more open source tools, game engines or libraries</strong> in their projects. <a href="https://www.valvesoftware.com/en/" target="_blank" rel="noopener">Valve</a> wanted players to make a game independent of language - something that could be understood regardless of a player’s language. And as always, the jam organizers encouraged all developers to make <a href="https://docs.microsoft.com/en-us/windows/desktop/winauto/microsoft-active-accessibility" target="_blank" rel="noopener">accessible</a> work! One diversifier even encouraged participants to utilize works that were recently released into the <a href="https://en.wikipedia.org/wiki/2019_in_public_domain" target="_blank" rel="noopener">public domain at the start of 2019</a>.</p><h3 id="Highlights"><a href="#Highlights" class="headerlink" title="Highlights"></a>Highlights</h3><ul><li>Over 50 hours of jammer footage livestreamed on <a href="https://mixer.com/" target="_blank" rel="noopener">Mixer</a> from all over the world.</li><li>Rami Ismail (of <a href="https://www.vlambeer.com/" target="_blank" rel="noopener">Vlambeer</a> fame) announced <a href="https://gamedev.world/" target="_blank" rel="noopener">GameDev.World</a>, a global game development event to be livestreamed and translated into eight languages.</li></ul><p>One other important thing to note is the jam organization’s dedication to keeping education accessible to all. ALL work created during the jam are uploaded under the <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener">Attribution-NonCommercial-ShareAlike 4.0 Creative Commons license</a>.</p><p><a href="https://globalgamejam.org/legal-policies" target="_blank" rel="noopener">As they say on their site</a>:</p><blockquote><p>“This basically means the team that created the game, owns the original content and can do with it as they please, and that Global Game Jam® retains an original copy that other people can download, modify and distribute for non-commercial purposes. </p></blockquote><blockquote><p>“All files necessary to run the game, as well as all assets, source code and project files created during the GGJ and necessary to rebuild/compile &amp; link the game from scratch must be uploaded as well. Third party tools, libraries, engines and assets that are used for the game, but not created during the GGJ, may be omitted from the GGJ project submission. However, clear instructions must be included on how to purchase or obtain these resources in order to continue development on the game.”</p></blockquote><h2 id="My-Work"><a href="#My-Work" class="headerlink" title="My Work"></a>My Work</h2><p>This was my first time participating in a game jam and my first time participating in a large-scale programming meetup, ever. </p><p><img src="/images/posts/ggj-2019/screenshot-music.gif" alt="Screenshot of my music production process."></p><p>As part of my work with other groups, I ended up creating a <strong>music</strong> in addition to <strong>programming</strong> for my own group!</p><p><img src="/images/posts/ggj-2019/reggie-screenshot.png" alt="Screenshot of Reggie."></p><p>I supported fellow creators <a href="https://globalgamejam.org/users/dganimates" target="_blank" rel="noopener">Dillon Guscott</a> (3D Artist &amp; Animator), <a href="https://globalgamejam.org/users/smendez15" target="_blank" rel="noopener">Sharlene Mendez</a> (UI Design &amp; Art), and <a href="https://globalgamejam.org/users/theninjarabbit5" target="_blank" rel="noopener">Anna Karwacki</a> (Programming), in their project, <a href="https://globalgamejam.org/2019/games/reggie" target="_blank" rel="noopener"><em>Reggie</em></a> - it was submitted under the <code>Puzzle Design Challenge</code> (sponsored by <strong>Red Bull Mind Gamers</strong> and <strong>The Tetris Company</strong>) and <code>Language-Independence</code> (sponsored by <strong>Valve Software</strong>) diversifiers. You can find the game <a href="https://github.com/theninjarabbit5/GlobalGameJam2019" target="_blank" rel="noopener">here</a>.</p><p>During this game jam I worked with these technologies: <code>Blender (Open Source)</code>, <code>Maya</code>, <code>Photoshop</code>, <code>FL Studio</code>, <code>Native Instruments (Kontakt Komplete 11)</code>, and <code>Hexo (Static-Site Generator)</code>.</p><h2 id="Letting-Go"><a href="#Letting-Go" class="headerlink" title="Letting Go"></a><a href="https://globalgamejam.org/2019/games/letting-go" target="_blank" rel="noopener">Letting Go</a></h2><blockquote><p>Every home has a story. <em>What happens when home doesn’t want to let you go?</em> In this game, the player must appease the spirit of their home, taking care to pack away items of sentimental value as they prepare to move out of the family home. Haunting the player, the house leaves shuffles these items around, locks doors, and attempts to persuade them to stay by showing them old memories. Do you remember? While this experience is, sadly, unfinished, you can still walk around the space we have built!</p></blockquote><p><img src="/images/posts/ggj-2019/screenshot-1.png" alt="Screenshot of the game"></p><h3 id="A-Look-at-the-Team"><a href="#A-Look-at-the-Team" class="headerlink" title="A Look at the Team"></a>A Look at the Team</h3><p>Our team name was created by a collection of our initials: ‘<a href="https://rimij405.github.io/ggj19-gjaci-home/"><em>GJACI Games</em></a>‘.</p><p><img src="/images/posts/ggj-2019/logo.png" alt="Logo for our group."></p><h4 id="Environment-Artists"><a href="#Environment-Artists" class="headerlink" title="Environment Artists"></a>Environment Artists</h4><p><a href="https://globalgamejam.org/users/jb5913" target="_blank" rel="noopener">Jessica Bösherz (jb5913)</a><br><a href="https://globalgamejam.org/users/carenflohr" target="_blank" rel="noopener">Caren Flohr (carenflohr)</a></p><blockquote><p>Jessica and Caren worked to put together the environment and laid out many of the assets that were made available for us to use for the game jam.</p></blockquote><h4 id="Animations-amp-3D-Modelling"><a href="#Animations-amp-3D-Modelling" class="headerlink" title="Animations &amp; 3D Modelling"></a>Animations &amp; 3D Modelling</h4><p><a href="https://globalgamejam.org/users/gmac6422" target="_blank" rel="noopener">Grant Macwilliam (gmac6422)</a><br><a href="https://globalgamejam.org/users/carenflohr" target="_blank" rel="noopener">Caren Flohr (carenflohr)</a></p><blockquote><p>Grant and Caren were in charge of creating 3D models and for polishing animations.</p></blockquote><h4 id="Programmer"><a href="#Programmer" class="headerlink" title="Programmer"></a>Programmer</h4><p><a href="https://github.com/rimij405" target="_blank" rel="noopener">Ian Effendi (effendiian)</a></p><blockquote><p>I was the primary programmer for this game. I worked to get everyone’s art assets into Unity’s engine and troubleshooted errors that came up along the way. I also created our project’s <a href="https://rimij405.github.io/ggj19-gjaci-home/">blog</a> using Hexo!</p></blockquote><h4 id="Graphic-Artist"><a href="#Graphic-Artist" class="headerlink" title="Graphic Artist"></a>Graphic Artist</h4><p><a href="https://globalgamejam.org/users/angelbites" target="_blank" rel="noopener">Angel Gray (angelbites)</a></p><blockquote><p>Angel created some 2D art in the game, created GJACI Games’ logo, and developed the user interface for the game.</p></blockquote><p><img src="/images/posts/ggj-2019/screenshot-2.png" alt="Another screenshot of the game."></p><h2 id="Post-Mortem"><a href="#Post-Mortem" class="headerlink" title="Post-Mortem"></a>Post-Mortem</h2><p><img src="/images/posts/ggj-2019/screenshot-3.png" alt="Another screenshot of the game."></p><h3 id="Too-Many-Hats"><a href="#Too-Many-Hats" class="headerlink" title="Too-Many Hats"></a>Too-Many Hats</h3><p>Personally, I felt that I was spread thin between so many different projects. I really want to go back and revisit the work that I started in this context. Luckily the very permissive license projects are given upon submission to the game jam mean there’s an opportunity for me to go back and improve on those initial ideas. </p><p>Game development is an iterative process; I felt there was a disconnect between my work (as a programmer) and the artwork being completed by my peers. There was a lot more time-to-polish for my work than theirs! This helped me become more comfortable with working through messy work and pushing to get a stronger level of quality.</p><p>Every project that I’ve taken on since then has increased in difficulty and I’m getting closer and closer to meeting what I think is a desirable level of quality.</p><h3 id="Next-Steps"><a href="#Next-Steps" class="headerlink" title="Next Steps"></a>Next Steps</h3><p>I’m looking forward to revisiting some of my older game projects with this new experience. Most exciting is the prospect of taking a shot at creating my own experimental FPS game - I’ll likely be writing more about that as the idea takes shape and form.</p><p><img src="/images/posts/ggj-2019/screenshot-4.png" alt="Another screenshot of the game."></p><h2 id="See-More"><a href="#See-More" class="headerlink" title="See More"></a>See More</h2><p><a href="https://globalgamejam.org/2019/games/letting-go-working-title" target="_blank" rel="noopener">Global Game Jam Submission</a>.</p><p><a href="https://github.com/rimij405/ggj19-gjaci-home" target="_blank" rel="noopener">GitHub Repository</a>.</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
          <category> hfoss </category>
          
      </categories>
      
      
        <tags>
            
            <tag> open-source </tag>
            
            <tag> hackathon </tag>
            
            <tag> meetup </tag>
            
            <tag> nodeJS </tag>
            
            <tag> react </tag>
            
            <tag> mental health </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mission: Authentication</title>
      <link href="/blog/cybersecurity/mission-authentication/"/>
      <url>/blog/cybersecurity/mission-authentication/</url>
      
        <content type="html"><![CDATA[<h1 id="Mission-Authentication"><a href="#Mission-Authentication" class="headerlink" title="Mission: Authentication"></a>Mission: Authentication</h1><p>Today’s little server-side experimentation dealt with ssh security and authentication. I’ll admit, I’ve been logging into my personal server using a password.</p><p>Before we dive into it, as a <strong>disclaimer</strong>:</p><blockquote><p><strong>I am in no way a cryptologist, cryptographer, or security expert. The material written here was taken from around the web, and, as all things, is subject to human error.</strong></p></blockquote><p>That <a href="https://simple.wikipedia.org/wiki/Cleartext" target="_blank" rel="noopener">cleartext</a> security information has been passing through my tunnels ever since I started working on that server. It was simply time to move one step up in the world of authentication - it was time to use some <em>cryptography</em>.</p><a id="more"></a><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>As always, I like to make sure I understand what it is I’m playing with. Cryptology? Cryptography? Aren’t they the same thing?</p><p>Well, according to <a href="https://crypto.stackexchange.com/users/23623/sejpm" target="_blank" rel="noopener">@SEJPM</a> and <a href="https://crypto.stackexchange.com/users/29574/lery" target="_blank" rel="noopener"><em>@Lery</em></a> over at the Crypto StackExchange, there are a couple of related terms that tend to be used <a href="https://crypto.stackexchange.com/questions/57818/is-there-any-difference-between-cryptography-and-cryptology" target="_blank" rel="noopener">interchangeably</a>.</p><h3 id="Semantics"><a href="#Semantics" class="headerlink" title="Semantics"></a>Semantics</h3><p>To get down to the semantics:</p><blockquote><p><em>Cryptology</em> is the study of cryptography (Definition 1.1) and cryptanalysis.</p></blockquote><p>In other words, it’s referred to as the, “science of cryptography.”</p><blockquote><p><em>Cryptography</em> is the study of mathematical techniques related to aspects of information security such as confidentiality, data integrity, entity authentication, and data origin authentication.</p></blockquote><p>Cryptography deals with the actual security, in practice. There’s also one other term:</p><blockquote><p><em>Cryptanalysis</em> is the study of mathematical techniques for attempting to defeat cryptographic techniques, and, more generally, information security services.</p></blockquote><p>That’s where the techniques are used to evaluate cryptographic practices. It’s good to keep these things in mind when we talk about modern cryptology.</p><h3 id="The-Past"><a href="#The-Past" class="headerlink" title="The Past"></a>The Past</h3><p>While the actual study of the practice is relatively young - <a href="https://access.redhat.com/blogs/766093/posts/1976023" target="_blank" rel="noopener">within 100 years, according to Huzaifa Sidhpurwala</a> - cryptography itself has been around for thousands of years. The encryption of messages by hand have been used to keep sensitive secrets away from prying eyes; one of the earliest known and simplest ciphers in history is known as the <a href="http://practicalcryptography.com/ciphers/caesar-cipher/" target="_blank" rel="noopener">Caeser cipher, or substitution cipher</a>. It took it’s name from Julius Caeser who used it to keep military communications secret.</p><h3 id="The-Now"><a href="#The-Now" class="headerlink" title="The Now"></a>The Now</h3><p>Security on the interet, in some ways, hasn’t changed. We still encrypt our text and we still rely on messages that travel between endpoints. Today we use public-key cryptography, or asymmetric cryptography, in various sceruity models ranging from authentication, authorization, and more.</p><h2 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h2><p>When our client reaches out to our server/host, one crucial part in the step is to authenticate both parties.</p><h3 id="Client-Side"><a href="#Client-Side" class="headerlink" title="Client-Side"></a>Client-Side</h3><p>On the client-side, this might look like a host key fingerprint. By keeping track of this information, the client can verify that the host on the other side of the connection is, in fact, who they say they are.</p><h3 id="Server-Side"><a href="#Server-Side" class="headerlink" title="Server-Side"></a>Server-Side</h3><p>If the server is given a public key by the client, it can check to ensure the client has the accompanying private key whenever it connects. If the key is given passphrase protection, the client is responsible for authenticating the key before it can be trusted by the server as well!</p><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><p>Secure Shell (SSH) is a cryptographic <a href="https://man.openbsd.org/ssh.1" target="_blank" rel="noopener">remote login program</a>, providing a secure channel over an unsecured network in client-server architecture. We can use applications that leverage this protocol to do things like manage files remotely, update repositories, and transfer files.</p><p><img src="/images/posts/mission-authentication/pankaj-patel-large.jpg" alt="Screenshot of GitHub ssh session - Image by Pankaj Patel"></p><p>One strategy for securing this channel is through the use of the public-key cryptography. With great power comes great responsibility: the ability to execute command remotely is great for DevOps and sysadmins, but, the remote communication can be exposed to a lot of third-party actors.</p><p><strong>PasswordAuthentication</strong></p><p>Logging into a secure shell remotely can vary depending on the host’s settings, but, for the most part, clients typically connect to a host by providing a username, hostname, and port. The most basic of authentication allows users to enter a password (that is sent as cleartext) over the network. While this is the easiest way to remote login to a server, it’s also the least secure.</p><p><strong>ChallengeResponseAuthentication</strong></p><p>Similar to PasswordAuthentication, users have to enter a password through a keyboard-interactive terminal in order to successfully authenticate their client to the host. Unlike PasswordAuthentication, this Authentication protocol can vary in security. Sometimes known as the <a href="https://en.wikipedia.org/wiki/Challenge-Handshake_Authentication_Protocol" target="_blank" rel="noopener">Challenge-Handshake Authentication Protocol</a> (CHAP), the host issues a challenge to the client. Once received, the client will combine that challenge with a secret that’s shared between them - this is usually the password - and calculate a hashed value from it, before sending that value back to the host. The host, which should have the expected shared secret already stored, will calculate the expected value on its end before comparing it to the response from the client. If the challenge is successfully met (meaning the user input the correct shared secret), the authentication is considered successful. Some versions will allow the host to send new challenges to the client at random intervals to continually check the authenticity of the client.</p><h3 id="Key-Fingerprints"><a href="#Key-Fingerprints" class="headerlink" title="Key Fingerprints"></a>Key Fingerprints</h3><p>In public-key cryptography, a public key fingerprint is a short sequence of bytes used to identify a longer public key. Fingerprints are created by applying a cryptographic hash function to a public key. Since fingerprints are shorter than the keys they refer to, they can be used to simplify certain key management tasks.</p><p>These keys are meant to be human readable for the purposes of identification: often public keys will be encoded into hexadecimal strings like below:</p><p><code>43:51:43:a1:b5:fc:8b:b7:0a:3a:a9:b1:0f:66:73:a8</code></p><p>Fingerprints won’t always look like the MD5 hash above. SHA-1 fingerprints are often nothing more than a string of hexadecimal digits: <code>2fd4e1c67a2d28fced849ee1bb76e7391b93eb12</code>.</p><h3 id="ssh-keygen"><a href="#ssh-keygen" class="headerlink" title="ssh-keygen"></a>ssh-keygen</h3><p><code>ssh-keygen</code> is a command line tool that <a href="https://man.openbsd.org/ssh-keygen.1" target="_blank" rel="noopener">generates, manages, and converts authentication keys</a> for SSH. Keys generated with this tool default to the OpenSSH-specific format. Generally, a user will generate the public key and indicate where to store the private key, before protecting them with a passphrase. While the names can be changed, in the OpenSSH format, private keys are stored in plaintext without a file extension and public keys are given the, ‘.pub’ file extension. Although they are stored in plaintext, the data held inside them is a mix of randomly generated content based on an crpytographic algorithm. Knowing the content of one file in isolation does little to risk the host as they can easily be revoked. (This does, however, require the sysadmin know of a breach).</p><p>The tool can also be used to check the fingerprints of certain keys! Host keys are created without a passphrase as they serve as identity markers more so than authentication checks.</p><p>The following command takes a public host key created with the ED25519 algorithm, and outputs the fingerprint as an MD5 hash:</p><p><code>ssh-keygen -l -E md5 -f ssh_host_ed25519_key.pub</code>.</p><p>By default, the fingerprint command will display a SHA256 hash:</p><p><code>ssh-keygen -lf ssh_host_ed25519_key.pub</code></p><p>Knowing how to get a particular formatted hash is important when checking if a host’s fingerprint has changed.</p><h3 id="PuTTY"><a href="#PuTTY" class="headerlink" title="PuTTY"></a>PuTTY</h3><p>One method for setting up SSH Public-key cryptography is with <a href="https://www.putty.org/" target="_blank" rel="noopener">PuTTY</a>, a terminal emulator that can act as a client for SSH, Telnet, rlogin, and raw TCP communication protocols.</p><p>PuTTY is joined by a few additional applications that are often run in its suite, such as PuTTYgen, an asymmetric cryptography key generation utility. Their application allows you to generate a public and private key for use in the system. In this case, private keys can be exported to the open-source OpenSSH format or as a PuTTY Private-key (*.ppk) file, a propriatary format.</p><p>You can also control the host key algorithm preference when authenticating to a host for the first time. If a client doesn’t have a key in one algorithm, it will move onto the next algorithm in the preference list.</p><h3 id="ssh-agent"><a href="#ssh-agent" class="headerlink" title="ssh-agent"></a>ssh-agent</h3><p>The <code>ssh-agent</code> is a program that <a href="https://man.openbsd.org/ssh-agent.1" target="_blank" rel="noopener">holds private keys used for public-key cryptography authentication</a>. Initially, a system’s ssh-agent will not have any private keys, but, as users <code>ssh-add</code> private keys to the client, they’ll be able to authenticate automatically when the host requests their key.</p><p>The general process is to generate both a public and private key, before placing the public key on the host. The client keeps track of the local private key and presents it upon SSH login to a remote host. When the host uses the public key to request the private key, if the client does not have the private key, times out, or cannot enter the correct passphrase after a set amount of attempts, the authentication process will fail.</p><h2 id="Final-Thoughts"><a href="#Final-Thoughts" class="headerlink" title="Final Thoughts"></a>Final Thoughts</h2><p>Certifications on the Secure Socket Layer and Secure Shell logins both require public-key cryptography in order to remain secure. These algorithms are not bullet proof, but, they can take a very long time to brute force and crack.</p><p>At the end of the day, keys are generated in a pseudorandom process; it will always remain theoretically possible to crack algorithmic security systems, so long as there is an infinite amount of time and processing power.</p><p>That shouldn’t scare you from securing your server and your platforms! It is unrealistic to expect anyone to crack the toughest of algorithms (short of an unknown backdoor exploitation) within any sort of reasonable amount of time, in today’s age of technological dreams.</p><p>While I’m not new to being a system admin for Linux-based servers, I am paying more attention to the security that protects my data and information. You should too!</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
          <category> cybersecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> personal </tag>
            
            <tag> tutorial </tag>
            
            <tag> ssh </tag>
            
            <tag> authentication </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Next Steps</title>
      <link href="/blog/hfoss/next-steps/"/>
      <url>/blog/hfoss/next-steps/</url>
      
        <content type="html"><![CDATA[<h1 id="The-Way-It-Goes"><a href="#The-Way-It-Goes" class="headerlink" title="The Way It Goes"></a>The Way It Goes</h1><p>I recently read <a href="https://dev.to/dechamp/25-years-of-coding-and-im-just-beginning-442n" target="_blank" rel="noopener">25 years of coding, and I’m just beginning</a> by dev.to user DeChamp, and found some intriguing responses across the web. One particular <a href="https://www.pskirko.com/2019/01/20/re-25-years-of-coding/" target="_blank" rel="noopener">Re:</a> came from <a href="https://www.pskirko.com/" target="_blank" rel="noopener">Peter Skirko</a>. Rather than read back the very relatable thoughts and ideas they both covered, as pertains to development, I thought I’d begin with it to share where my mental state has recently turned to.</p><a id="more"></a><h2 id="The-Next-Steps"><a href="#The-Next-Steps" class="headerlink" title="The Next Steps"></a>The Next Steps</h2><p>I chose to use the <a href="https://jamstack.org" target="_blank" rel="noopener">JAMStack</a> to <a href="/blog/hfoss/hello-world/" title="build my website">build my website</a> because it should be quick, painless, and easy to write posts and get them published to the live site. This post, in some ways, is a test of that. That brings me to figuring out the next steps for my blog. While I want to add much, much more in terms of a portfolio, at the time of making this post, this site is half-baked. I’m afraid that if someone comes onto the website in its current state, it’ll reflect poorly on my own work. <em>But, maybe that’s the motivation I’ve been looking for.</em></p><p><strong>I think that it’s time to keep working.</strong> By that, I mean I need to cover up the potholes and make sure that I finish what I start - all before I add more features. This means cleaning up broken links and adding little bits at a time. Keeping the momentum in building this living site will ensure that I learn more about the Hexo static-site generator as time goes on. Maybe, I’ll contribute additional resources to the generator’s documentation wherever I can!</p><h2 id="Roadmap"><a href="#Roadmap" class="headerlink" title="Roadmap"></a>Roadmap</h2><ul><li>Clean up any missing links/pages/sections. (This will require getting acquainted with some of Hexo’s features).</li><li>Add an About page.</li><li>Learn more about the .ejs template language that came with this blog’s theme!</li><li>Customize the theme!?!?</li><li>Read up about schema! (I’ll be looking at <a href="https://schema.org/docs/gs.html#microdata_how" target="_blank" rel="noopener">schema.org</a>.)</li><li>Continue writing this Roadmap!</li></ul>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
          <category> hfoss </category>
          
      </categories>
      
      
        <tags>
            
            <tag> personal </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>It Started With a Bang!</title>
      <link href="/blog/hfoss/hello-world/"/>
      <url>/blog/hfoss/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="It-Started-With-a-BANG"><a href="#It-Started-With-a-BANG" class="headerlink" title="It Started With a BANG"></a>It Started With a BANG</h1><p>At least, I wish creating a personal website was as cinematic and bombastic as a Michael Bay-directed Transformers film. Alas, as with most projects, it takes a little bit of research to know what we’re getting into. Let’s take a look at how this site was made, shall we?</p><a id="more"></a><h2 id="First-Flight"><a href="#First-Flight" class="headerlink" title="First Flight"></a>First Flight</h2><h3 id="IRC"><a href="#IRC" class="headerlink" title="IRC"></a>IRC</h3><p>I decided to use <a href="https://hexchat.github.io/" target="_blank" rel="noopener">HexChat</a>, and registered my nick: effendiian.</p><h3 id="Email"><a href="#Email" class="headerlink" title="Email"></a>Email</h3><p>I signed up for the <a href="https://lists.rit.edu/mailman/listinfo.mmcgi/floss-seminar" target="_blank" rel="noopener">floss-seminar discussion</a> mailing list!</p><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>Finally I was ready to work on my blog. After I put on my Spotify playlist of, “<a href="https://open.spotify.com/user/1271966423/playlist/6MlIJGplHSLlgmQgb0BKpw?si=khc3sdT-Sce904oMTdbeKQ" target="_blank" rel="noopener">Iconic, Inspirational, and Intriguing</a>“ orcheastral music, it was time to get to work. Before I could choose a framework to get started with, I needed to <em>know</em> what it was that I wanted to create.</p><h3 id="Priority-Features"><a href="#Priority-Features" class="headerlink" title="Priority Features"></a>Priority Features</h3><p>The term <a href="https://en.wiktionary.org/wiki/blog" target="_blank" rel="noopener"><em>blog</em></a> is the shortened form of <em>weblog</em>, a term coined by Jorn Barger in the early days of the internet. It’s a space for authors to journal thoughts and share them publicly. As such, there are a series of features expected of modern blog format websites.</p><ul><li><strong>Publish posts</strong>. It’s important that the time it takes to write and publish entries is quick, painless, and easy. The simpler the process is, the better.</li><li><strong>Use an RSS feed</strong>. This is necessary for my own personal needs; RSS/ATOM feeds are incredibly useful for aggregators and I would like to incorporate that with my solution.</li><li><strong>Open source</strong>. A big part of my work is going to emphasize open source technologies. It’s only fitting that the blog itself is built with open source tools as well.</li><li><strong>Free hosting</strong>. Less of a user feature and more of a development limitation, the website needs to be hosted for free. The budget is nil. Zilch. Nada. Free.</li></ul><h3 id="Secondary-Features"><a href="#Secondary-Features" class="headerlink" title="Secondary Features"></a>Secondary Features</h3><p>These additional features are great for quality of life and I kept them in mind while searching for the tools that I would use in order to make the blog.</p><ul><li><strong>Multimedia support</strong>. Not all my work involves code. Graphic design, artwork, and animations that I create should be able to reside on the website.</li><li><strong>Customizable Theme</strong>. I like to have control over my website’s layout. This way, I can iterate the design across several periods of development, instead of implementing everything all at once.</li><li><strong>Comment System</strong>. Allowing people to comment on my articles would not be a bad idea.</li></ul><h2 id="What-Type-of-Website"><a href="#What-Type-of-Website" class="headerlink" title="What Type of Website"></a>What Type of Website</h2><p>I’ll be hosting my website on GitHub using <a href="https://help.github.com/articles/using-a-static-site-generator-other-than-jekyll/" target="_blank" rel="noopener"><strong>GitHub Pages</strong></a> - but I won’t be using <a href="https://jekyllrb.com/" target="_blank" rel="noopener">Jekyll</a>. Instead, I’ll be using the static-site generator Hexo, for these reasons:</p><ul><li><strong>Easy GitHub Pages publishing</strong>. While Jekyll does have GitHub pages support and integration, the differences needed in order to host Hexo’s generated sites are minimal.</li><li><strong>Extensibility with NodeJS</strong>. The NodeJS integration delivers the rich package ecosystem on npm (and yarn) to Hexo developers.</li><li><strong>Speedy</strong>. Node is speedy; as a result, Hexo generates its static files in a matter of seconds. This is one advantage to using Hexo over Jekyll:</li><li><strong>Unopinionated Asset Handling</strong>. Unlike Jekyll, Hexo doesn’t come with an asset pipeline for pre-processing assests by default. Instead, you’re encouraged to roll what works for your setup using Node utilities.</li><li><strong>Template How You Want To</strong>. Hexo contains support for several types of templating engines, including <a href="https://github.com/paularmstrong/swig" target="_blank" rel="noopener">Swig</a> (by default), <a href="https://github.com/hexojs/hexo-renderer-ejs" target="_blank" rel="noopener">EJS</a>, <a href="https://github.com/hexojs/hexo-renderer-haml" target="_blank" rel="noopener">Haml</a>, and <a href="https://github.com/hexojs/hexo-renderer-jade" target="_blank" rel="noopener">Jade</a>/<a href="https://github.com/maxknee/hexo-render-pug" target="_blank" rel="noopener">Pug</a>. Although good, Jekyll is limited to the Liquid templating engine.</li><li><strong>Local CMS</strong>. Both Hexo and Jekyll have this option that isn’t true for all static-site generators; access to a local development CMS through <a href="https://github.com/jaredly/hexo-admin" target="_blank" rel="noopener">Hexo Admin</a> and <a href="https://github.com/jekyll/jekyll-admin" target="_blank" rel="noopener">Jekyll Admin</a>, respectively.</li></ul><h2 id="The-JAMStack"><a href="#The-JAMStack" class="headerlink" title="The JAMStack"></a>The JAMStack</h2><p>By using Hexo to create content and hosting my static content on GitHub Pages, we end up with a website that’s been built on what’s known as the <a href="https://jamstack.org/" target="_blank" rel="noopener">JAMStack</a>.</p><blockquote><p><strong>J</strong>avaScript<br><strong>A</strong>PIs<br><strong>M</strong>arkup</p></blockquote><p>JAM is sticky and it holds the pieces all together. There are benefits (as listed on <a href="https://jamstack.org/best-practices/" target="_blank" rel="noopener">their site</a>) that come with using this stack.</p><h2 id="Working-With-Hexo"><a href="#Working-With-Hexo" class="headerlink" title="Working With Hexo"></a>Working With Hexo</h2><p>Hexo’s extensibility offers a lot of power if you’re willing to put in the extra work to set things up. By default, Hexo projects are initialized with a standard set of plugins and is installed with the default theme, <a href="https://github.com/hexojs/hexo-theme-landscape" target="_blank" rel="noopener">Landscape</a>.</p><h3 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h3><p>I used these additional plugins while setting up the site:</p><ul><li><a href="https://github.com/adamsiwiec/hexagon" target="_blank" rel="noopener">Hexagon</a> - Package manager for installing Hexo plugins and themes.</li><li><a href="https://github.com/hexojs/hexo-generator-archive" target="_blank" rel="noopener">Archive Generator</a> - Generates a blog post archive.</li><li><a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">Feed Generator</a> - Generates feed for ATOM or RSS2 aggregators.</li><li><a href="https://www.npmjs.com/package/hexo-generator-search" target="_blank" rel="noopener">Search Generator</a> - Generates a search index with configuration options available.</li><li><a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">Git Deployer</a> - Allows Hexo to deploy to a git repository.</li></ul><h3 id="Themes"><a href="#Themes" class="headerlink" title="Themes"></a>Themes</h3><p>I used this theme for my website:</p><ul><li><a href="https://github.com/probberechts/hexo-theme-cactus" target="_blank" rel="noopener">Cactus (Dark)</a>.</li></ul><p>This should give a good overview of how this website was created. All that’s left is to put up some posts on the website itself!</p><h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><p>I used the following open source tools during the creation of this website.</p><h3 id="Joplin"><a href="#Joplin" class="headerlink" title="Joplin"></a><a href="https://joplin.cozic.net/" target="_blank" rel="noopener">Joplin</a></h3><p>Joplin is a free, open source note taking and to-do application, which can handle a large number of notes organised into notebooks. The notes are searchable, can be copied, tagged and modified either from the applications directly or from your own text editor. The notes are in Markdown format. This was useful for drafting blog posts and keeping track of all the resources I needed to use.</p><h3 id="Draw-io"><a href="#Draw-io" class="headerlink" title="Draw.io"></a><a href="https://github.com/jgraph/drawio/blob/master/LICENSE" target="_blank" rel="noopener">Draw.io</a></h3><p>Useful for putting up wireframes when designing website layouts.</p><h3 id="Hexo-gitignore"><a href="#Hexo-gitignore" class="headerlink" title="Hexo .gitignore"></a><a href="https://gist.github.com/spacemonkey/0a9a69004c11f82fc894" target="_blank" rel="noopener">Hexo .gitignore</a></h3><p>Used this .gitignore file as the base of my own.</p><h3 id="Real-Favicon-Generator"><a href="#Real-Favicon-Generator" class="headerlink" title="Real Favicon Generator"></a><a href="https://realfavicongenerator.net/" target="_blank" rel="noopener">Real Favicon Generator</a></h3><p>Used to create the favicon for the browser and for other application platforms (iOS, Android, etc.).</p><h3 id="Game-Icons"><a href="#Game-Icons" class="headerlink" title="Game-Icons"></a><a href="https://game-icons.net/" target="_blank" rel="noopener">Game-Icons</a></h3><p>Ever growing collection of free game icons. PNG and SVG file formats available.</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
          <category> hfoss </category>
          
      </categories>
      
      
        <tags>
            
            <tag> open-source </tag>
            
            <tag> class </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
